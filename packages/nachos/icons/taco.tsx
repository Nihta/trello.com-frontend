// this component was automatically generated by IconGlyph.template.js
import React from 'react';
import { TestId } from '@trello/test-ids';

import { Icon, IconColor, IconSize } from '../src/components/Icon';

export interface GlyphProps {
  /**
   * A string that is applied as an aria attribute on the icon. Usually it
   * matches up with the display name of the icon
   * @default If no label is provided, it will fallback to the name of the icon
   */
  label?: string;
  /**
   * The color that the Icon should be rendered as.
   * @default @icon-default-color (#42526E)
   */
  color?: IconColor;
  /**
   * The size to render the Icon size.
   * @default "medium"
   */
  size?: IconSize;
  /**
   * A string that gets placed as a data attribute (data-test-id) onto the
   * Icon wrapper so that our
   * smoketest can properly target and test the component
   * @default undefined
   */
  testId?: TestId;
  // Escape hatches
  /**
   * ⚠️ DO NOT USE THIS PROP UNLESS YOU REALLY REALLY HAVE TO.
   *
   * Places a class name on the Icon (more specifically, the svg itself). This
   * is placed in addition to the classes already placed on the Icon. This is
   * placed directly onto the SVG via the glyph templates that are
   * generated by IconGlyph.template.js
   *
   * Please refrain from using this unless absolutely necessary.
   * @default undefined
   */
  dangerous_className?: string;
  /**
   * The switch for the icon to be centered in the dedicated space with padding around it.
   * Designed for cases when icon is not inline.
   */
  block?: boolean;
}

const TacoIconGlyph = () => {
  return (
    <svg
      width="24"
      height="24"
      role="presentation"
      focusable="false"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M3.77889 8.78143C3.41756 10.6743 3.67949 12.6187 3.86334 13.5955C3.22567 14.8122 2.99994 16.3423 3 20.9996C3.00215 20.9895 3.49833 19.1852 4.10733 18.4096C4.72081 17.643 5.14223 17.4481 6.00294 17.5181C4.47042 13.9908 7.11847 12.0954 8.99649 12.094C10.3285 12.0954 11.3808 12.605 12.0839 14.0835C12.6166 12.7472 13.8207 12.0749 15.1525 12.0753C17.031 12.0749 19.8065 13.9908 18.2868 17.5087C19.0394 17.3282 19.7008 17.8687 20.2106 18.5973C20.6723 19.2713 20.9451 20.7166 20.9917 20.9634C20.9962 20.987 20.9986 20.9996 20.9989 20.9996C21.0106 21.01 20.941 14.4455 20.3701 13.6987C20.5586 12.7596 20.8537 10.7427 20.4733 8.78143C19.8711 5.66368 18.6557 3.05142 18.1461 3.00077C17.6543 2.9547 15.0935 4.97264 13.4352 8.86589C13.0087 8.81575 12.5721 8.78737 12.1308 8.78143C11.6835 8.78737 11.2486 8.81534 10.8264 8.86589C9.16418 4.97223 6.60362 2.9547 6.11555 3.00077C5.60204 3.05142 4.3869 5.66368 3.77889 8.78143ZM18.0052 3.66664C17.2071 3.82406 15.3458 7.65836 15.678 8.68718C15.8602 9.24537 16.098 9.29881 16.526 9.39499C16.8892 9.4766 17.3892 9.58898 18.1085 10.0667C19.5694 11.0623 19.8223 12.5143 19.851 12.6789C19.8527 12.689 19.8536 12.6942 19.8539 12.6942C19.8537 12.6942 19.855 12.6917 19.8577 12.6867C19.913 12.5827 20.5422 11.399 19.9478 8.62149C19.323 5.70643 18.5412 3.56721 18.0052 3.66664ZM6.25633 3.66664C7.05554 3.82404 8.91563 7.65788 8.58361 8.68718C8.40183 9.24466 8.1645 9.2982 7.7385 9.39431C7.37656 9.47597 6.87844 9.58836 6.16249 10.0666C4.60548 11.1225 4.32247 13.2197 4.32319 13.2197C4.32247 13.2197 3.69386 11.5332 4.31381 8.62149C4.94094 5.70618 5.72263 3.56723 6.25633 3.66664ZM12.2339 20.3051C13.7249 20.3051 13.8762 19.6094 13.8762 19.1321C13.8762 18.6619 13.6869 18.2781 12.2339 18.2781C10.8472 18.2781 10.5823 18.6619 10.5823 19.1321C10.5823 19.6094 10.7716 20.3051 12.2339 20.3051ZM9.85994 15.2749C9.85994 14.4911 9.42685 13.8579 8.89337 13.8579C8.35969 13.8579 7.9268 14.4911 7.9268 15.2749C7.9268 16.0527 8.35969 16.2133 8.89337 16.2133C9.42685 16.2132 9.85994 16.0527 9.85994 15.2749ZM15.265 13.8579C15.8038 13.8579 16.241 14.496 16.241 15.2843C16.241 16.0704 15.8038 16.2321 15.265 16.2321C14.7262 16.2321 14.2891 16.0704 14.2891 15.2843C14.2891 14.496 14.7262 13.8579 15.265 13.8579Z"
        fill="currentColor"
      />
    </svg>
  );
};

export const TacoIcon: React.FunctionComponent<GlyphProps> = (props) => {
  const { testId, dangerous_className, size, color, label, block } = props;
  return (
    <Icon
      testId={testId}
      size={size}
      dangerous_className={dangerous_className}
      color={color}
      block={block}
      label={label || 'TacoIcon'}
      glyph={TacoIconGlyph}
    />
  );
};
