import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { createProviderWithCustomFetchData } from './create-data-provider';
import { fetchJson } from '../utils/fetch';
export var DEFAULT_AVAILABLE_PRODUCTS_ENDPOINT = '/gateway/api/available-products/api/available-products';
export var createAvailableProductsProvider = function createAvailableProductsProvider() {
  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_AVAILABLE_PRODUCTS_ENDPOINT;
  return createProviderWithCustomFetchData('availableProducts', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var response, usingExperimentApi, defaultUnauthorizedResponse;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return fetchJson(url);

          case 3:
            response = _context.sent;
            return _context.abrupt("return", response);

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            usingExperimentApi = url.indexOf('experiment-api') > -1;

            if (!(usingExperimentApi && _context.t0.status === 401)) {
              _context.next = 13;
              break;
            }

            defaultUnauthorizedResponse = Promise.resolve({
              sites: [],
              isPartial: false
            });
            return _context.abrupt("return", defaultUnauthorizedResponse);

          case 13:
            throw _context.t0;

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 7]]);
  })));
};