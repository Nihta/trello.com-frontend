import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import { Transformer } from './transformer';
import { getResolverUrl, getBaseUrl } from '../../client/utils/environments';
import * as api from '../../client/api';
export var EditorCardProvider = /*#__PURE__*/function () {
  function EditorCardProvider(envKey) {
    _classCallCheck(this, EditorCardProvider);

    this.baseUrl = getBaseUrl(envKey);
    this.resolverUrl = getResolverUrl(envKey);
    this.transformer = new Transformer();
    this.requestHeaders = {
      Origin: this.baseUrl
    };
  }

  _createClass(EditorCardProvider, [{
    key: "check",
    value: function () {
      var _check = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resourceUrl) {
        var endpoint, response;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                endpoint = "".concat(this.resolverUrl, "/check");
                _context.next = 4;
                return api.request('post', endpoint, {
                  resourceUrl: resourceUrl
                }, this.requestHeaders);

              case 4:
                response = _context.sent;
                return _context.abrupt("return", response.isSupported);

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](0);
                // eslint-disable-next-line
                console.error('failed to fetch /check', _context.t0);
                return _context.abrupt("return", undefined);

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 8]]);
      }));

      function check(_x) {
        return _check.apply(this, arguments);
      }

      return check;
    }()
  }, {
    key: "fetchPatterns",
    value: function () {
      var _fetchPatterns = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var endpoint, response;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                endpoint = "".concat(this.resolverUrl, "/providers");
                _context2.next = 4;
                return api.request('post', endpoint, undefined, this.requestHeaders);

              case 4:
                response = _context2.sent;
                return _context2.abrupt("return", response.providers.reduce(function (allSources, provider) {
                  var providerSources = provider.patterns.map(function (pattern) {
                    return pattern.source;
                  });
                  return allSources.concat(providerSources);
                }, []));

              case 8:
                _context2.prev = 8;
                _context2.t0 = _context2["catch"](0);
                // eslint-disable-next-line
                console.error('failed to fetch /providers', _context2.t0);
                return _context2.abrupt("return", undefined);

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 8]]);
      }));

      function fetchPatterns() {
        return _fetchPatterns.apply(this, arguments);
      }

      return fetchPatterns;
    }()
  }, {
    key: "findPattern",
    value: function () {
      var _findPattern = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {
        var patterns;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.t0 = this.patterns;

                if (_context3.t0) {
                  _context3.next = 5;
                  break;
                }

                _context3.next = 4;
                return this.fetchPatterns();

              case 4:
                _context3.t0 = _context3.sent;

              case 5:
                patterns = _context3.t0;

                if (!patterns) {
                  _context3.next = 9;
                  break;
                }

                this.patterns = patterns;
                return _context3.abrupt("return", patterns.some(function (pattern) {
                  return url.match(pattern);
                }));

              case 9:
                return _context3.abrupt("return", false);

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function findPattern(_x2) {
        return _findPattern.apply(this, arguments);
      }

      return findPattern;
    }()
  }, {
    key: "resolve",
    value: function () {
      var _resolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(url, appearance) {
        var isSupported;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                _context4.next = 3;
                return this.findPattern(url);

              case 3:
                _context4.t0 = _context4.sent;

                if (_context4.t0) {
                  _context4.next = 8;
                  break;
                }

                _context4.next = 7;
                return this.check(url);

              case 7:
                _context4.t0 = _context4.sent;

              case 8:
                isSupported = _context4.t0;

                if (!isSupported) {
                  _context4.next = 11;
                  break;
                }

                return _context4.abrupt("return", this.transformer.toAdf(url, appearance));

              case 11:
                _context4.next = 16;
                break;

              case 13:
                _context4.prev = 13;
                _context4.t1 = _context4["catch"](0);
                // eslint-disable-next-line
                console.warn("Error when trying to check Smart Card url \"".concat(url, " - ").concat(_context4.t1.prototype.name, " ").concat(_context4.t1.message), _context4.t1);

              case 16:
                return _context4.abrupt("return", Promise.reject(undefined));

              case 17:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[0, 13]]);
      }));

      function resolve(_x3, _x4) {
        return _resolve.apply(this, arguments);
      }

      return resolve;
    }()
  }]);

  return EditorCardProvider;
}();
export var editorCardProvider = new EditorCardProvider();