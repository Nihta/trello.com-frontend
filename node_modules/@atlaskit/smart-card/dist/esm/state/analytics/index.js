import { uiAuthEvent, uiAuthAlternateAccountEvent, uiCardClickedEvent, uiActionClickedEvent, uiClosedAuthEvent, uiRenderSuccessEvent, uiRenderFailedEvent, resolvedEvent as _resolvedEvent, unresolvedEvent as _unresolvedEvent, invokeSucceededEvent as _invokeSucceededEvent, invokeFailedEvent as _invokeFailedEvent, connectSucceededEvent as _connectSucceededEvent, connectFailedEvent as _connectFailedEvent, trackAppAccountConnected, screenAuthPopupEvent, instrumentEvent } from '../../utils/analytics';
import { useMemo } from 'react';
export var useSmartLinkAnalytics = function useSmartLinkAnalytics(dispatchAnalytics) {
  var ui = useMemo(function () {
    return {
      authEvent: function authEvent(display, definitionId, extensionKey) {
        return dispatchAnalytics(uiAuthEvent(display, definitionId, extensionKey));
      },
      authAlternateAccountEvent: function authAlternateAccountEvent(display, definitionId, extensionKey) {
        return dispatchAnalytics(uiAuthAlternateAccountEvent(display, definitionId, extensionKey));
      },
      cardClickedEvent: function cardClickedEvent(display, definitionId, extensionKey) {
        return dispatchAnalytics(uiCardClickedEvent(display, definitionId, extensionKey));
      },
      actionClickedEvent: function actionClickedEvent(providerKey, actionType, display) {
        return dispatchAnalytics(uiActionClickedEvent(providerKey, actionType, display));
      },
      closedAuthEvent: function closedAuthEvent(display, definitionId, extensionKey) {
        return dispatchAnalytics(uiClosedAuthEvent(display, definitionId, extensionKey));
      },
      renderSuccessEvent: function renderSuccessEvent(display, definitionId, extensionKey) {
        return dispatchAnalytics(uiRenderSuccessEvent(display, definitionId, extensionKey));
      },
      renderFailedEvent: function renderFailedEvent(display, error, errorInfo) {
        return dispatchAnalytics(uiRenderFailedEvent(display, error, errorInfo));
      }
    };
  }, [dispatchAnalytics]);
  var operational = useMemo(function () {
    return {
      resolvedEvent: function resolvedEvent(id, definitionId, extensionKey, resourceType) {
        return dispatchAnalytics(_resolvedEvent(id, definitionId, extensionKey, resourceType));
      },
      unresolvedEvent: function unresolvedEvent(id, status, definitionId, extensionKey, resourceType) {
        return dispatchAnalytics(_unresolvedEvent(id, status, definitionId, extensionKey, resourceType));
      },
      invokeSucceededEvent: function invokeSucceededEvent(id, providerKey, actionType, display) {
        return dispatchAnalytics(_invokeSucceededEvent(id, providerKey, actionType, display));
      },
      invokeFailedEvent: function invokeFailedEvent(id, providerKey, actionType, display, reason) {
        return dispatchAnalytics(_invokeFailedEvent(id, providerKey, actionType, display, reason));
      },
      connectSucceededEvent: function connectSucceededEvent(definitionId, extensionKey) {
        return dispatchAnalytics(_connectSucceededEvent(definitionId, extensionKey));
      },
      connectFailedEvent: function connectFailedEvent(definitionId, extensionKey, reason) {
        return dispatchAnalytics(_connectFailedEvent(definitionId, extensionKey, reason));
      },
      instrument: function instrument(id, status, definitionId, extensionKey, resourceType, error) {
        var event = instrumentEvent(id, status, definitionId, extensionKey, resourceType, error);

        if (event) {
          dispatchAnalytics(event);
        }
      }
    };
  }, [dispatchAnalytics]);
  var track = useMemo(function () {
    return {
      appAccountConnected: function appAccountConnected(definitionId, extensionKey) {
        return dispatchAnalytics(trackAppAccountConnected(definitionId, extensionKey));
      }
    };
  }, [dispatchAnalytics]);
  var screen = useMemo(function () {
    return {
      authPopupEvent: function authPopupEvent(definitionId, extensionKey) {
        return dispatchAnalytics(screenAuthPopupEvent(definitionId, extensionKey));
      }
    };
  }, [dispatchAnalytics]);
  return useMemo(function () {
    return {
      ui: ui,
      operational: operational,
      track: track,
      screen: screen
    };
  }, [ui, operational, track, screen]);
};