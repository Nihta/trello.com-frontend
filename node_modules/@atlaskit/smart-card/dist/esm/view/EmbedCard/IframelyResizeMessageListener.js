import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { embedHeaderHeight } from '@atlaskit/media-ui/embeds';
var EMBED_ALLOWED_DOMAINS = ['http://cdn.iframe.ly', 'https://cdn.iframe.ly', // Our CDN domain names
'https://iframely.staging.atl-paas.net', 'https://iframely.prod.atl-paas.net'];
export var IframelyResizeMessageListener = /*#__PURE__*/function (_React$Component) {
  _inherits(IframelyResizeMessageListener, _React$Component);

  var _super = _createSuper(IframelyResizeMessageListener);

  function IframelyResizeMessageListener() {
    var _this;

    _classCallCheck(this, IframelyResizeMessageListener);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "messageCallback", function (event) {
      var embedIframeRef = _this.props.embedIframeRef; // Security: we should only listen to messages from specific domains.
      // See https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage.

      var isFromAllowedDomain = EMBED_ALLOWED_DOMAINS.includes(event.origin); // This is needed for WD/VR tests to work properly, where we load example as iframe src

      var isFromSameDomain = event.origin === window.origin;
      var isFromExpectedIframe = embedIframeRef.current && event.source === embedIframeRef.current.contentWindow;
      var isStringData = typeof event.data === 'string';

      if ((isFromAllowedDomain || isFromSameDomain) && isFromExpectedIframe && isStringData) {
        try {
          var data = JSON.parse(event.data);

          if (data.method === 'resize' && typeof data.height === 'number') {
            _this.onEmbedHeightChange({
              height: data.height
            });
          }
        } catch (e) {}
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onEmbedHeightChange", function (data) {
      var onHeightUpdate = _this.props.onHeightUpdate;
      var height = data.height + embedHeaderHeight;
      onHeightUpdate(height);
    });

    return _this;
  }

  _createClass(IframelyResizeMessageListener, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('message', this.messageCallback);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('message', this.messageCallback);
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);

  return IframelyResizeMessageListener;
}(React.Component);