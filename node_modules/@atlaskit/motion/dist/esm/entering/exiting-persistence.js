import React, { Children, createContext, useContext, useMemo, useRef, } from 'react';
import { isReducedMotion } from '../utils/accessibility';
import { useForceRender } from '../utils/use-force-render';
// We define empty context here so the object doesn't change.
var emptyContext = {
    // Motions will always appear if not inside a exiting persistence component.
    appear: true,
    isExiting: false,
};
var ExitingContext = createContext(emptyContext);
var isAnyPreviousKeysMissingFromCurrent = function (currentMap, previous) {
    for (var i = 0; i < previous.length; i++) {
        var element = previous[i];
        var key = element.key;
        if (!currentMap[key]) {
            return true;
        }
    }
    return false;
};
/**
 * This method will wrap any React element with a context provider. We're using context (instead of
 * cloneElement) so we can communicate between multiple elements without the need of prop drilling
 * (results in a better API for consumers).
 */
var wrapChildWithContextProvider = function (child, value) {
    if (value === void 0) { value = emptyContext; }
    return (React.createElement(ExitingContext.Provider, { key: child.key + "-provider", value: value }, child));
};
var childrenToObj = function (children) {
    return children.reduce(function (acc, child) {
        acc[child.key] = child;
        return acc;
    }, {});
};
var spliceNewElementsIntoPrevious = function (current, previous) {
    var splicedChildren = previous.concat([]);
    var previousMap = childrenToObj(previous);
    for (var i = 0; i < current.length; i++) {
        var child = current[i];
        var childIsNew = !previousMap[child.key];
        if (childIsNew) {
            // This will insert the new element after the previous element.
            splicedChildren.splice(i + 1, 0, child);
        }
    }
    return splicedChildren;
};
/**
 * This function will convert all children types to an array while also filtering out non-valid React elements.
 */
var childrenToArray = function (children) {
    var childrenAsArray = [];
    // We convert children to an array using this helper method as it will add keys to children that do not
    // have them, such as when we have hardcoded children that are conditionally rendered.
    Children.toArray(children).forEach(function (child) {
        // We ignore any boolean children to make our code a little more simple later on.
        if (typeof child !== 'boolean') {
            // Children WILL have a key after being forced into an array using the React.Children helper.
            childrenAsArray.push(child);
        }
    });
    return childrenAsArray;
};
/**
 * This handles the case when a render updates during an exit motion.
 * If any child is mounted again we removed them from the exiting children object and return true.
 */
var hasAnyExitingChildMountedAgain = function (exitingChildren, children) {
    var exitingChildMountedAgain = false;
    children.forEach(function (child) {
        if (exitingChildren.current[child.key]) {
            exitingChildMountedAgain = true;
            delete exitingChildren.current[child.key];
        }
    });
    return exitingChildMountedAgain;
};
var ExitingPersistence = function (_a) {
    var _b = _a.appear, appearFromProp = _b === void 0 ? false : _b, childs = _a.children, exitThenEnter = _a.exitThenEnter;
    var children = childrenToArray(childs);
    var childrenObj = childrenToObj(children);
    var previousChildren = useRef([]);
    var persistedChildren = useRef([]);
    var forceRender = useForceRender();
    var exitingChildren = useRef({});
    var appear = useRef(appearFromProp);
    var defaultContextValue = useMemo(function () { return ({
        appear: appear.current,
        isExiting: false,
    }); }, 
    // React rules of hooks says this isn't needed because mutating appear won't cause a re-render.
    // While technically true - it will trigger this to make a new object on the _next_ render which is what we want.
    // Remove this or use appear instead of appear.current and you will notice a test breaks.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [appear.current]);
    if (isReducedMotion()) {
        return children;
    }
    if (!appear.current) {
        // We always want child motions to appear after the initial mount.
        appear.current = true;
    }
    // This entire block can't be an effect because we need it to run synchronously during a render
    // else when elements are being removed they will be remounted instead of being updated.
    if (previousChildren.current.length &&
        isAnyPreviousKeysMissingFromCurrent(childrenObj, previousChildren.current)) {
        if (persistedChildren.current.length === 0 ||
            hasAnyExitingChildMountedAgain(exitingChildren, children)) {
            persistedChildren.current = previousChildren.current;
        }
        // We have persisted children now set from previous children.
        // Let's update previous children so we have it available next render.
        previousChildren.current = children;
        return (exitThenEnter
            ? persistedChildren.current
            : spliceNewElementsIntoPrevious(children, persistedChildren.current)).map(function (child) {
            var currentChild = childrenObj[child.key];
            if (!currentChild) {
                // We've found an exiting child - mark it!
                exitingChildren.current[child.key] = true;
                return wrapChildWithContextProvider(child, {
                    isExiting: true,
                    appear: true,
                    onFinish: function () {
                        delete exitingChildren.current[child.key];
                        // We will only remove the exiting elements when any subsequent exiting elements have also finished.
                        // Think of removing many items from a todo list - when removing a few over a few clicks we don't
                        // want the list jumping around when they exit.
                        if (Object.keys(exitingChildren.current).length === 0) {
                            // Set previous children to nothing.
                            // This let's us skip the next render check as it's assumed children and previous will be the same.
                            previousChildren.current = [];
                            persistedChildren.current = [];
                            // Re-render after the element(s) have animated away which will end up rendering the latest children.
                            forceRender();
                        }
                    },
                });
            }
            // This element isn't exiting.
            // Wrap context and let's continue on our way.
            return wrapChildWithContextProvider(currentChild, defaultContextValue);
        });
    }
    else {
        previousChildren.current = children;
    }
    return children.map(function (child) {
        return wrapChildWithContextProvider(child, defaultContextValue);
    });
};
export var useExitingPersistence = function () {
    return useContext(ExitingContext);
};
export default ExitingPersistence;
//# sourceMappingURL=exiting-persistence.js.map