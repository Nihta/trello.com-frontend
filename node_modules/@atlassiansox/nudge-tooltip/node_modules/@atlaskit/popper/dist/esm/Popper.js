import { __read, __spread } from "tslib";
import React, { useMemo } from 'react';
import { Popper as ReactPopper, } from 'react-popper';
var constantModifiers = [
    {
        name: 'flip',
        options: {
            flipVariations: false,
            padding: 5,
            boundary: 'clippingParents',
            rootBoundary: 'viewport',
        },
    },
    {
        name: 'preventOverflow',
        options: {
            padding: 5,
            rootBoundary: 'document',
        },
    },
];
function defaultChildrenFn() {
    return null;
}
var defaultOffset = [0, 8];
export function Popper(_a) {
    var _b = _a.children, children = _b === void 0 ? defaultChildrenFn : _b, _c = _a.offset, offset = _c === void 0 ? defaultOffset : _c, _d = _a.placement, placement = _d === void 0 ? 'bottom-start' : _d, _e = _a.referenceElement, referenceElement = _e === void 0 ? undefined : _e, modifiers = _a.modifiers, _f = _a.strategy, strategy = _f === void 0 ? 'fixed' : _f;
    var _g = __read(offset, 2), offsetX = _g[0], offsetY = _g[1];
    // Merge a new offset modifier only if new offset values passed in
    var internalModifiers = useMemo(function () {
        var offsetModifier = {
            name: 'offset',
            options: {
                offset: [offsetX, offsetY],
            },
        };
        return __spread(constantModifiers, [offsetModifier]);
    }, [offsetX, offsetY]);
    // Merge custom props and memoize
    var mergedModifiers = useMemo(function () {
        if (modifiers == null) {
            return internalModifiers;
        }
        return __spread(internalModifiers, modifiers);
    }, [internalModifiers, modifiers]);
    return (React.createElement(ReactPopper, { modifiers: mergedModifiers, placement: placement, strategy: strategy, referenceElement: referenceElement }, children));
}
//# sourceMappingURL=Popper.js.map