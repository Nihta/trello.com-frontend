/**
 * TypeAheadHelper is helper file which assists in
 * tracking analytics around typeahead components, such as mentions, in
 * a consistent way. It generates objects that can be passed into
 * an instance of analyticsWebClient to trigger events.
 *
 * Example usage:
 *
 * const typeAheadHelper = new TypeAheadHelper(
 *   webClient.sendTrackEvent,
 *   baseEvent // an object containing the action + additional context attributes
 * );
 *
 * mentionHelper.search('abc');
 * mentionHelper.searched(resultsArray);
 * mentionHelper.selected(selectedIndex);
 */
import { __assign } from "tslib";
function combineWithBaseEvent(action, extraAttributes, baseEvent) {
    var event = __assign({ action: action }, baseEvent);
    event.attributes = __assign(__assign({}, extraAttributes), event.attributes);
    return event;
}
var TypeAheadHelper = /** @class */ (function () {
    /**
     * Constructs a new instance of TypeAheadHelper.
     *
     * @param {Function} onEvent the function to call when an analytics event must be fired.
     *  There will be one argument, the analytics event object.
     * @param {Object} baseEvent base event with action and context to use when triggering events.
     *  More details here: https://product-fabric.atlassian.net/wiki/x/XQCZFg
     */
    function TypeAheadHelper(onEvent, baseEvent) {
        this._onEvent = onEvent;
        this._baseEvent = baseEvent;
        this._searchStartedTime = null;
        this._lastQueryResultsTime = null;
        this._queryLength = null;
        this._baseEvent = __assign({}, baseEvent);
    }
    /**
     * Records the start time of the first web request
     * and a copy of the query length for sending later in an analytics event.
     *
     * It should be called before the web request is initially made.
     *
     * @param {String} query the string entered as the query
     */
    TypeAheadHelper.prototype.search = function (query) {
        if (!query && query !== '') {
            throw new Error('Missing query param');
        }
        this._searchStartedTime = Date.now();
        this._queryLength = (query || '').length;
    };
    /**
     * searched() tracks an event representing the completion of the web request
     * to fetch results for a given typeahead query.
     *
     * Events are structured as follows:
     *
     * <actionSubject>.searched {
     *    queryLength: 12, // length in characters
     *    responseTimeMs: 5023, // time to return results in milliseconds
     *    results: [ 'abc', '123' ] // actual result content
     * }
     *
     * It should be called after the response returns from the web server.
     *
     * @param {Array} results List of results returned by the server. MUST NOT CONTAIN UGC.
     */
    TypeAheadHelper.prototype.searched = function (results) {
        if (!results) {
            throw new Error('Missing results param');
        }
        if (this._queryLength === null) {
            throw new Error('search() must be called before searched().');
        }
        var responseTimeMs = (Date.now() - this._searchStartedTime);
        this._lastQueryResultsTime = Date.now();
        this._lastResults = results;
        var extraAttributes = {
            responseTimeMs: responseTimeMs,
            queryLength: this._queryLength,
            results: results,
        };
        var event = combineWithBaseEvent('searched', extraAttributes, this._baseEvent);
        this._onEvent(event);
    };
    /**
     * selected() tracks an event representing one of the results in the typeahead
     * being chosen.
     *
     * Events are structured as follows:
     *
     * <actionSubject>.selected {
     *    queryLength: 12,
     *    selectionIndex: 0,
     *    selectionTimeMs: 123 // ms since the response came back
     *    searchTimeMs: 123 // ms since the search was made, i.e. selection + response time
     * }
     *
     * @param {Number} selectionIndex the index of the result was selected.
     */
    TypeAheadHelper.prototype.selected = function (selectionIndex) {
        if (!selectionIndex && selectionIndex !== 0) {
            throw new Error('Missing selectionIndex param');
        }
        if (!this._lastQueryResultsTime) {
            throw new Error('searched() must be called before selected().');
        }
        var now = Date.now();
        var selectionTimeMs = (now - this._lastQueryResultsTime);
        var searchTimeMs = (now - this._searchStartedTime);
        var selectedResultValue = this._lastResults[selectionIndex];
        var extraAttributes = {
            queryLength: this._queryLength,
            selectionIndex: selectionIndex,
            selectionTimeMs: selectionTimeMs,
            searchTimeMs: searchTimeMs,
            selectedResultValue: selectedResultValue,
        };
        var event = combineWithBaseEvent('selected', extraAttributes, this._baseEvent);
        this._onEvent(event);
    };
    return TypeAheadHelper;
}());
export default TypeAheadHelper;
