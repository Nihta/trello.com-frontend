import { __assign } from "tslib";
import BrowserInteractionTime from 'browser-interaction-time';
import { validateDwellBaseEvent } from './eventValidation';
var DEFAULT_TIMING = {
    initialPollInterval: 5000,
    idleTimeout: 30000,
    multiplierCallback: function (x) { return x + x; },
};
/**
 * Helper class to record the amount of time a user has spent on a page.
 *
 * Two kinds of dwell events are fired. Dwell milestone events are fired periodically while the
 * user is on the page, at increasing intervals (by default, 5s, 10s, 20s, 40s, etc.). A final
 * dwell event will also be fired when the user leaves the page.
 *
 * Note that the event data passed to this helper should be compatible with a 'track' event.
 * See https://extranet.atlassian.com/display/PData/Track+Events for more information.
 *
 * Example usage:
 *
 * const baseEventData = {
 *   actionSubject: 'page',
 *   actionSubjectId: 'aa4fd6c5-28f4-40fa-807a-765a39957cb5',
 *   source: 'page',
 *   containerType: 'space',
 *   containerId: '340f1acf-d15b-4677-88c6-4671d23fb131',
 * }
 *
 * const helper = new DwellTimeHelper(sendTrackEventFunction, baseEventData, searchSessionId)
 * helper.start();
 */
var DwellTimeHelper = /** @class */ (function () {
    /**
     * Callback for sending a 'track' analytics event. This callback should either be the
     * 'sendTrackEvent' method on the AnalyticsWebClient, or a method that eventually delegates to it.
     * The data for the dwell event will be passed to this method for sending.
     *
     * @callback trackCallback
     * @param {Object} eventData - the base event data that will be added to the track event.
     */
    /**
     * Creates and initialises the DwellTimeHelper.
     *
     * @param {trackCallback} trackCallback - the track callback responsible for actually sending
     * the event.
     * @param {Object} eventData - the base data that will be added to the track event.
     * Additional dwell time attributes will be appended to this data. Note that you don't need to
     * include the 'action' property, as this will be added automatically.
     * @param {?string} searchSessionId - a unique identifier for the related search session.
     * @param {?Object} timingOptions - for the purpose of debugging, you can override the default
     * timing used for measuring dwell time. The following values are possible:
     * - initialPollInterval: how long to wait before the first dwell milestone event
     * is fired (in seconds). Default = 5.
     * - pollBackoffRate: how much to multiply the last poll interval by on each dwell milestone.
     * event. Default = 2.
     * - idleTimeout: how long to wait for no user activity before pausing
     * the dwell timer (in seconds). Default = 30s.
     */
    function DwellTimeHelper(trackCallback, eventData, searchSessionId, timingOptions) {
        var _this = this;
        /**
         * Starts the dwell timer. This method should be called upon the initial page load.
         */
        this.start = function () {
            _this.browserInteractionTime.startTimer();
            _this.browserInteractionTime.addTimeIntervalEllapsedCallback({
                callback: function (timeInMilliseconds) {
                    return _this._sendDwellEvent(_this._eventData, _this._searchSessionId, timeInMilliseconds, false);
                },
                timeInMilliseconds: _this._timing.initialPollInterval,
                multiplier: _this._timing.multiplierCallback,
            });
            window.addEventListener('beforeunload', _this._onBeforeUnload);
        };
        /**
         * Stops the dwell timer and sends the final dwell event. Call this method if you wish to
         * finalise a dwell measurement without starting a new one. When switching to a new page in a
         * single-page app, use newPage instead.
         */
        this.stop = function () {
            if (_this.browserInteractionTime.isRunning()) {
                _this._sendDwellEvent(_this._eventData, _this._searchSessionId, _this.browserInteractionTime.getTimeInMilliseconds(), true);
            }
            _this.browserInteractionTime.stopTimer();
        };
        /**
         * Send the final dwell event and reinitialise the dwell timer for a new page.
         * This method should be called whenever a new page is switched to in a single-page app context.
         *
         * @param {Object} eventData - the base data that will be added to the track event.
         * @param {?string} searchSessionId - the new search session ID.
         */
        this.newPage = function (eventData, searchSessionId) {
            validateDwellBaseEvent(eventData);
            _this.stop();
            _this.browserInteractionTime.reset();
            _this.setEventData(eventData);
            _this.setSearchSessionId(searchSessionId);
            _this.start();
        };
        this.setEventData = function (eventData) {
            _this._eventData = eventData;
        };
        this.getEventData = function () { return _this._eventData; };
        this.setSearchSessionId = function (searchSessionId) {
            _this._searchSessionId = searchSessionId;
        };
        this.getSearchSessionId = function () { return _this._searchSessionId; };
        this.destroy = function () {
            _this.browserInteractionTime.destroy();
            window.removeEventListener('beforeunload', _this._onBeforeUnload);
        };
        this._onBeforeUnload = function () {
            _this.stop();
            _this.destroy();
        };
        this._sendDwellEvent = function (eventData, searchSessionId, timeInMilliseconds, isFinalDwellEvent) {
            var dwellAttributes = {
                dwellTime: timeInMilliseconds,
                searchReferrer: searchSessionId,
                finalDwellEvent: isFinalDwellEvent,
            };
            _this._trackCallback({
                action: 'dwelled',
                actionSubject: eventData.actionSubject,
                actionSubjectId: eventData.actionSubjectId,
                source: eventData.source,
                containerType: eventData.containerType,
                containerId: eventData.containerId,
                objectType: eventData.objectType,
                objectId: eventData.objectId,
                attributes: __assign(__assign({}, dwellAttributes), eventData.attributes),
                tags: eventData.tags,
            });
        };
        if (!trackCallback) {
            throw new Error('trackCallback is required for DwellTimeHelper');
        }
        validateDwellBaseEvent(eventData);
        this._trackCallback = trackCallback;
        this._eventData = eventData;
        this._searchSessionId = searchSessionId;
        this._timing = __assign(__assign({}, DEFAULT_TIMING), timingOptions);
        this.browserInteractionTime = new BrowserInteractionTime({
            idleTimeoutMs: this._timing.idleTimeout,
            checkCallbacksIntervalMs: 500,
        });
    }
    return DwellTimeHelper;
}());
export default DwellTimeHelper;
