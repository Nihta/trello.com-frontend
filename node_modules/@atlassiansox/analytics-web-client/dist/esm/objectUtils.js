/* eslint-disable no-return-assign, no-sequences */
// https://www.30secondsofcode.org/js/s/map-keys
var mapKeys = function (obj, fn) {
    return Object.keys(obj).reduce(function (acc, k) {
        acc[fn(obj[k], k, obj)] = obj[k];
        return acc;
    }, {});
};
// https://www.30secondsofcode.org/js/s/pick
var pick = function (obj, arr) {
    return arr.reduce(function (acc, curr) { return (curr in obj && (acc[curr] = obj[curr]), acc); }, {});
};
// https://www.30secondsofcode.org/js/s/omit-by
var omitBy = function (obj, fn) {
    return Object.keys(obj)
        .filter(function (k) { return !fn(obj[k], k); })
        .reduce(function (acc, key) { return ((acc[key] = obj[key]), acc); }, {});
};
// https://www.30secondsofcode.org/js/s/pick-by
var pickBy = function (obj, fn) {
    return Object.keys(obj)
        .filter(function (k) { return fn(obj[k], k); })
        .reduce(function (acc, key) { return ((acc[key] = obj[key]), acc); }, {});
};
// https://www.30secondsofcode.org/js/s/omit
var omit = function (obj, arr) {
    return Object.keys(obj)
        .filter(function (k) { return arr.indexOf(k) < 0; })
        .reduce(function (acc, key) { return ((acc[key] = obj[key]), acc); }, {});
};
// https://www.30secondsofcode.org/js/s/equals
var equals = function (a, b) {
    if (a === b)
        return true;
    if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
    }
    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) {
        return a === b;
    }
    if (a.prototype !== b.prototype)
        return false;
    var keys = Object.keys(a);
    if (keys.length !== Object.keys(b).length)
        return false;
    return keys.every(function (k) { return equals(a[k], b[k]); });
};
// https://www.30secondsofcode.org/js/s/partition
var partition = function (arr, fn) {
    return arr.reduce(
    // eslint-disable-next-line no-shadow
    function (acc, val, i, arr) {
        acc[fn(val, i, arr) ? 0 : 1].push(val);
        return acc;
    }, [[], []]);
};
export { mapKeys, pick, pickBy, omitBy, omit, equals, partition, };
