import { __read, __spread } from "tslib";
export var MAX_EVENTID_LENGTH = 100;
var DuplicateEventDetector = /** @class */ (function () {
    function DuplicateEventDetector() {
        var _this = this;
        this.addItem = function (item) { return _this.inProgressEventIds.add(item.msg.messageId); };
        this.done = function (error, items) {
            var _a;
            var messageIds = items.map(function (item) { return item.msg.messageId; });
            if (!error) {
                (_a = _this.pastEventIds).push.apply(_a, __spread(messageIds));
                if (_this.pastEventIds.length > MAX_EVENTID_LENGTH) {
                    _this.pastEventIds.splice(0, _this.pastEventIds.length - MAX_EVENTID_LENGTH);
                }
            }
            messageIds.forEach(function (id) { return _this.inProgressEventIds.delete(id); });
        };
        this.hasEventBeenSeen = function (item) { return _this.pastEventIds.indexOf(item.msg.messageId) >= 0
            || _this.inProgressEventIds.has(item.msg.messageId); };
        this.pastEventIds = [];
        this.inProgressEventIds = new Set();
    }
    return DuplicateEventDetector;
}());
export default DuplicateEventDetector;
